# Fetch data
type Query {
    launches: [Launch!]!
    launch(id: ID!): Launch
    # Queries for the current user
    me: User
}

# Modify data
type Mutation {
    # if false, booking trips failed -- check errors
    bookTrips(launchIds: [ID!]!): TripUpdateResponse!

    # if false, cancellation failed -- check errors
    cancelTrip(launchId: ID!): TripUpdateResponse!

    login(email: String!): String # login token
}

type TripUpdateResponse {
    success: Boolean!
    messages: String
    launches: [Launch] # Always return the data your updating
}

# Custom object Types
type Launch {
    id: ID!
    site: String
    mission: Mission
    rocket: Rocket
    isBooked: Boolean!
}

type Rocket {
    id: ID!
    name: String!
    type: String!
}

type User {
    id: ID!
    email: String!
    trips: [Launch!]!
}

type Mission {
    id: ID!
    missionPatch(size: PatchSize): String
}

enum PatchSize {
    SMALL
    LARGE
}